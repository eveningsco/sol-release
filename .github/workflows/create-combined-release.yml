name: Create Combined Release

on:
  repository_dispatch:
    types: [new_sol_release, new_sol_utils_release]
  workflow_dispatch:  # Allow manual triggering

jobs:
  create-combined-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%m%d%Y_%H-%M-%S')" >> $GITHUB_OUTPUT
    
    - name: Create working directory structure
      run: |
        mkdir -p downloads/bin
        mkdir -p downloads/services
        mkdir -p downloads/config
        mkdir -p downloads/logrotate
    
    - name: Download latest sol-server
      run: |
        echo "Fetching sol-server release..."
        RELEASE_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-server/releases/latest")
        
        # Function to download an asset
        download_asset() {
          local asset_name=$1
          local output_path=$2
          local ASSET_ID=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name==\"$asset_name\") | .id")
          
          if [ -n "$ASSET_ID" ] && [ "$ASSET_ID" != "null" ]; then
            echo "Downloading $asset_name (Asset ID: $ASSET_ID)"
            curl -L \
              -H "Accept: application/octet-stream" \
              -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
              "https://api.github.com/repos/eveningsco/sol-server/releases/assets/$ASSET_ID" \
              -o "$output_path"
              
            if [[ "$asset_name" != *.service && "$asset_name" != *.timer ]]; then
              chmod +x "$output_path"
            fi
          else
            echo "Failed to find $asset_name asset"
            exit 1
          fi
        }
        
        # Download executable
        download_asset "sol-server.zip" "downloads/bin/sol-server.zip"
        
        # Download service files
        download_asset "sol-connectivity.service" "downloads/services/sol-connectivity.service"
        download_asset "sol-connectivity.timer" "downloads/services/sol-connectivity.timer"
        download_asset "sol-server.service" "downloads/services/sol-server.service"

    - name: Download latest sol-software
      run: |
        echo "Fetching sol-software release..."
        RELEASE_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-software/releases/latest")
        
        # Function to download an asset
        download_asset() {
          local asset_name=$1
          local output_path=$2
          local ASSET_ID=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name==\"$asset_name\") | .id")
          
          if [ -n "$ASSET_ID" ] && [ "$ASSET_ID" != "null" ]; then
            echo "Downloading $asset_name (Asset ID: $ASSET_ID)"
            curl -L \
              -H "Accept: application/octet-stream" \
              -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
              "https://api.github.com/repos/eveningsco/sol-software/releases/assets/$ASSET_ID" \
              -o "$output_path"
              
            if [[ "$asset_name" != *.service ]]; then
              chmod +x "$output_path"
            fi
          else
            echo "Failed to find $asset_name asset"
            exit 1
          fi
        }
        
        # Download executable
        download_asset "sol-software" "downloads/bin/sol-software"
        
        # Download service file
        download_asset "sol-software.service" "downloads/services/sol-software.service"

    - name: Download latest sol-utils files
      run: |
        echo "Fetching sol-utils release..."
        # Get the release info
        RELEASE_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-utils/releases/latest")
        
        # Function to download an asset
        download_asset() {
          local asset_name=$1
          local output_path=$2
          local ASSET_ID=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name==\"$asset_name\") | .id")
          
          if [ -n "$ASSET_ID" ] && [ "$ASSET_ID" != "null" ]; then
            echo "Downloading $asset_name (Asset ID: $ASSET_ID)"
            curl -L \
              -H "Accept: application/octet-stream" \
              -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
              "https://api.github.com/repos/eveningsco/sol-utils/releases/assets/$ASSET_ID" \
              -o "$output_path"
              
            if [[ "$asset_name" != *.service && "$asset_name" != *.yml && "$asset_name" != *logrotate ]]; then
              chmod +x "$output_path"
            fi
          else
            echo "Failed to find $asset_name asset"
            exit 1
          fi
        }
        
        # Download executables
        download_asset "sol-update" "downloads/bin/sol-update"
        download_asset "sol-update-manager" "downloads/bin/sol-update-manager"
        download_asset "mass_gadget_watchdog" "downloads/bin/mass_gadget_watchdog"
        download_asset "update_version_info" "downloads/bin/update_version_info"
        download_asset "gpio_shutdown_trigger" "downloads/bin/gpio_shutdown_trigger"
        download_asset "off_mass_gadget" "downloads/bin/off_mass_gadget"
        download_asset "on_mass_gadget" "downloads/bin/on_mass_gadget"
        
        # Download service files
        download_asset "mass_gadget_watchdog.service" "downloads/services/mass_gadget_watchdog.service"
        download_asset "update_version_info.service" "downloads/services/update_version_info.service"
        download_asset "fbcp.service" "downloads/services/fbcp.service"
        download_asset "filebeat.service" "downloads/services/filebeat.service"
        
        # Download config files
        download_asset "filebeat.yml" "downloads/config/filebeat.yml"
        
        # Download logrotate files
        download_asset "sol-server-logrotate" "downloads/logrotate/sol-server-logrotate"
        download_asset "sol-software-logrotate" "downloads/logrotate/sol-software-logrotate"

    - name: List downloaded files
      run: |
        echo "Contents of downloads directory:"
        ls -lR downloads/
    
    - name: Create ZIP file
      if: success()
      run: |
        cd downloads
        zip -r ../sol-release-${{ steps.date.outputs.date }}.zip *
        cd ..
        echo "Created ZIP file:"
        ls -lh sol-release-${{ steps.date.outputs.date }}.zip
    
    - name: Create Release
      if: success()
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Release-${{ steps.date.outputs.date }}
        release_name: Combined Release ${{ steps.date.outputs.date }}
        body: |
          Combined SOL release package
          Build date: ${{ steps.date.outputs.date }}
          
          This release includes:
          Executables:
          - sol-server.zip
          - sol-software
          - sol-update
          - sol-update-manager
          - mass_gadget_watchdog
          - update_version_info
          - gpio_shutdown_trigger
          - off_mass_gadget
          - on_mass_gadget
          
          Service Files:
          - sol-server.service
          - sol-software.service
          - sol-connectivity.service
          - sol-connectivity.timer
          - mass_gadget_watchdog.service
          - update_version_info.service
          - fbcp.service
          - filebeat.service
          
          Config Files:
          - filebeat.yml
          
          Logrotate Files:
          - sol-server-logrotate
          - sol-software-logrotate
        draft: false
        prerelease: true
    
    - name: Upload Release Asset
      if: success()
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sol-release-${{ steps.date.outputs.date }}.zip
        asset_name: sol-release-${{ steps.date.outputs.date }}.zip
        asset_content_type: application/zip