name: Create Combined Release

on:
  repository_dispatch:
    types: [new_sol_release, new_sol_utils_release]
  workflow_dispatch:  # Allow manual triggering

jobs:
  create-combined-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%m%d%Y_%H-%M-%S')" >> $GITHUB_OUTPUT
    
    - name: Create working directory
      run: mkdir -p downloads
    
    - name: Download latest sol-server
      run: |
        echo "Fetching sol-server release..."
        # First get the asset ID
        ASSET_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-server/releases/latest")
        
        ASSET_ID=$(echo "$ASSET_INFO" | jq -r '.assets[0].id')
        
        if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" = "null" ]; then
          echo "Failed to get asset ID"
          exit 1
        fi
        
        echo "Downloading asset ID: $ASSET_ID"
        
        # Download the asset using the asset API endpoint
        curl -L \
          -H "Accept: application/octet-stream" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-server/releases/assets/$ASSET_ID" \
          -o downloads/sol-server
        
        # Verify file size
        EXPECTED_SIZE=$(echo "$ASSET_INFO" | jq -r '.assets[0].size')
        ACTUAL_SIZE=$(stat -f%z downloads/sol-server 2>/dev/null || stat -c%s downloads/sol-server)
        echo "Expected size: $EXPECTED_SIZE bytes"
        echo "Actual size: $ACTUAL_SIZE bytes"
        
        if [ "$ACTUAL_SIZE" != "$EXPECTED_SIZE" ]; then
          echo "Error: File size mismatch!"
          exit 1
        fi
        
        chmod +x downloads/sol-server
    
    - name: Download latest sol-software
      run: |
        echo "Fetching sol-software release..."
        # First get the asset ID
        ASSET_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-software/releases/latest")
        
        ASSET_ID=$(echo "$ASSET_INFO" | jq -r '.assets[0].id')
        
        if [ -z "$ASSET_ID" ] || [ "$ASSET_ID" = "null" ]; then
          echo "Failed to get asset ID"
          exit 1
        fi
        
        echo "Downloading asset ID: $ASSET_ID"
        
        # Download the asset using the asset API endpoint
        curl -L \
          -H "Accept: application/octet-stream" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-software/releases/assets/$ASSET_ID" \
          -o downloads/sol-software
        
        # Verify file size
        EXPECTED_SIZE=$(echo "$ASSET_INFO" | jq -r '.assets[0].size')
        ACTUAL_SIZE=$(stat -f%z downloads/sol-software 2>/dev/null || stat -c%s downloads/sol-software)
        echo "Expected size: $EXPECTED_SIZE bytes"
        echo "Actual size: $ACTUAL_SIZE bytes"
        
        if [ "$ACTUAL_SIZE" != "$EXPECTED_SIZE" ]; then
          echo "Error: File size mismatch!"
          exit 1
        fi
        
        chmod +x downloads/sol-software

    - name: Download latest sol-utils executables
      run: |
        echo "Fetching sol-utils release..."
        # First get the release info
        RELEASE_INFO=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
          "https://api.github.com/repos/eveningsco/sol-utils/releases/latest")
        
        # Download mass_gadget_watchdog
        MGW_ASSET_ID=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name=="mass_gadget_watchdog") | .id')
        
        if [ -n "$MGW_ASSET_ID" ] && [ "$MGW_ASSET_ID" != "null" ]; then
          echo "Downloading mass_gadget_watchdog (Asset ID: $MGW_ASSET_ID)"
          curl -L \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
            "https://api.github.com/repos/eveningsco/sol-utils/releases/assets/$MGW_ASSET_ID" \
            -o downloads/mass_gadget_watchdog
            
          chmod +x downloads/mass_gadget_watchdog
        else
          echo "Failed to find mass_gadget_watchdog asset"
          exit 1
        fi
        
        # Download update_version_info
        UVI_ASSET_ID=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name=="update_version_info") | .id')
        
        if [ -n "$UVI_ASSET_ID" ] && [ "$UVI_ASSET_ID" != "null" ]; then
          echo "Downloading update_version_info (Asset ID: $UVI_ASSET_ID)"
          curl -L \
            -H "Accept: application/octet-stream" \
            -H "Authorization: Bearer ${{ secrets.RELEASE_TOKEN }}" \
            "https://api.github.com/repos/eveningsco/sol-utils/releases/assets/$UVI_ASSET_ID" \
            -o downloads/update_version_info
            
          chmod +x downloads/update_version_info
        else
          echo "Failed to find update_version_info asset"
          exit 1
        fi
    
    - name: List downloaded files
      run: |
        echo "Contents of downloads directory:"
        ls -lh downloads/
    
    - name: Create ZIP file
      if: success()
      run: |
        cd downloads
        zip -r ../sol-release-${{ steps.date.outputs.date }}.zip *
        cd ..
        echo "Created ZIP file:"
        ls -lh sol-release-${{ steps.date.outputs.date }}.zip
    
    - name: Create Release
      if: success()
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Release-${{ steps.date.outputs.date }}
        release_name: Combined Release ${{ steps.date.outputs.date }}
        body: |
          Combined SOL release package
          Build date: ${{ steps.date.outputs.date }}
          
          This release includes:
          - Latest sol-server
          - Latest sol-software
          - Latest sol-utils:
            - mass_gadget_watchdog
            - update_version_info
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      if: success()
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sol-release-${{ steps.date.outputs.date }}.zip
        asset_name: sol-release-${{ steps.date.outputs.date }}.zip
        asset_content_type: application/zip