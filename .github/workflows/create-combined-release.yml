name: Create Combined Release

on:
  repository_dispatch:
    types: [new_sol_release]
  workflow_dispatch:  # Allow manual triggering

jobs:
  create-combined-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get current date
      id: date
      run: echo "date=$(date +'%m%d%Y_%H-%M-%S')" >> $GITHUB_OUTPUT
    
    - name: Create working directory
      run: mkdir -p downloads
    
    - name: Download latest sol-server
      run: |
        echo "Fetching sol-server release..."
        LATEST_RELEASE=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository_owner }}/sol-server/releases/latest)
        
        if [ $? -ne 0 ]; then
          echo "Failed to fetch sol-server release information"
          exit 1
        fi
        
        DOWNLOAD_URL=$(echo $LATEST_RELEASE | jq -r '.assets[0].browser_download_url')
        
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "No download URL found for sol-server"
          echo "Release info: $LATEST_RELEASE"
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        curl -L -o downloads/sol-server "$DOWNLOAD_URL"
        
        if [ $? -ne 0 ]; then
          echo "Failed to download sol-server"
          exit 1
        fi
        
        chmod +x downloads/sol-server
    
    - name: Download latest sol-software
      run: |
        echo "Fetching sol-software release..."
        LATEST_RELEASE=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository_owner }}/sol-software/releases/latest)
        
        if [ $? -ne 0 ]; then
          echo "Failed to fetch sol-software release information"
          exit 1
        fi
        
        DOWNLOAD_URL=$(echo $LATEST_RELEASE | jq -r '.assets[0].browser_download_url')
        
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "No download URL found for sol-software"
          echo "Release info: $LATEST_RELEASE"
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        curl -L -o downloads/sol-software "$DOWNLOAD_URL"
        
        if [ $? -ne 0 ]; then
          echo "Failed to download sol-software"
          exit 1
        fi
        
        chmod +x downloads/sol-software
    
    - name: List downloaded files
      run: |
        echo "Contents of downloads directory:"
        ls -la downloads/
    
    - name: Create ZIP file
      run: |
        cd downloads
        zip -r ../sol-release-${{ steps.date.outputs.date }}.zip *
        cd ..
        echo "Created ZIP file:"
        ls -la sol-release-${{ steps.date.outputs.date }}.zip
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Release-${{ steps.date.outputs.date }}
        release_name: Combined Release ${{ steps.date.outputs.date }}
        body: |
          Combined SOL release package
          Build date: ${{ steps.date.outputs.date }}
          
          This release includes:
          - Latest sol-server
          - Latest sol-software
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sol-release-${{ steps.date.outputs.date }}.zip
        asset_name: sol-release-${{ steps.date.outputs.date }}.zip
        asset_content_type: application/zip